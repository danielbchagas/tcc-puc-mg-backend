// <auto-generated />
using System;
using ECommerce.Cliente.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ECommerce.Cliente.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("507f941f-9a2e-4031-bead-4dd89d84a4ba"),
                            Ativo = true,
                            Nome = "Davi Giovanni Felipe",
                            Sobrenome = "Fernandes"
                        },
                        new
                        {
                            Id = new Guid("101e2a8c-e88a-4127-875b-fbc05f183edf"),
                            Ativo = true,
                            Nome = "Ayla Caroline",
                            Sobrenome = "Ana Gomes"
                        },
                        new
                        {
                            Id = new Guid("662069b0-a554-4589-ac61-c782da525625"),
                            Ativo = true,
                            Nome = "BetinaFlávia",
                            Sobrenome = "Souza"
                        });
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Documento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(18)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Documentos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12c637f6-9f2d-479e-a891-323abb615975"),
                            ClienteId = new Guid("507f941f-9a2e-4031-bead-4dd89d84a4ba"),
                            Numero = "903.142.734-92"
                        },
                        new
                        {
                            Id = new Guid("0fe25255-ff1a-4ebc-a139-3dfed13b3258"),
                            ClienteId = new Guid("101e2a8c-e88a-4127-875b-fbc05f183edf"),
                            Numero = "668.154.787-77"
                        },
                        new
                        {
                            Id = new Guid("66968d02-cef1-4584-bb94-dbc57cc6fb20"),
                            ClienteId = new Guid("662069b0-a554-4589-ac61-c782da525625"),
                            Numero = "345.712.047-10"
                        });
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Emails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc8170e0-66cd-49e2-bdd4-0752f4ab7d65"),
                            ClienteId = new Guid("507f941f-9a2e-4031-bead-4dd89d84a4ba"),
                            Endereco = "davi_giovanni_felipe@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("02ded591-029f-4b90-b13f-f7ff6274bb73"),
                            ClienteId = new Guid("101e2a8c-e88a-4127-875b-fbc05f183edf"),
                            Endereco = "ayla_caroline_ana_gomes@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1308e91e-3c41-45bc-a77d-31572749b95e"),
                            ClienteId = new Guid("662069b0-a554-4589-ac61-c782da525625"),
                            Endereco = "b_etina_flavia_souza@gmail.com"
                        });
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(9)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("char(2)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Enderecos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("999e2ba3-9a81-4674-8b07-9c488b1f2da4"),
                            Bairro = "Guará I",
                            Cep = "71090-265",
                            Cidade = "Brasília",
                            ClienteId = new Guid("507f941f-9a2e-4031-bead-4dd89d84a4ba"),
                            Estado = 6,
                            Logradouro = "Colônia Agrícola Águas Claras Chácara 23, 641"
                        },
                        new
                        {
                            Id = new Guid("996b46b1-839f-4d7a-940f-4294fdd60f15"),
                            Bairro = "Tarumã",
                            Cep = "82530-220",
                            Cidade = "Curitiba",
                            ClienteId = new Guid("101e2a8c-e88a-4127-875b-fbc05f183edf"),
                            Estado = 15,
                            Logradouro = "Praça São Francisco de Assis, 442"
                        },
                        new
                        {
                            Id = new Guid("1ee8de2d-2f9f-4158-8d7a-1ef008b3d2af"),
                            Bairro = "Abegay",
                            Cep = "98045-115",
                            Cidade = "Cruz Alta",
                            ClienteId = new Guid("662069b0-a554-4589-ac61-c782da525625"),
                            Estado = 20,
                            Logradouro = "Rua Neves, 378"
                        });
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Telefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Telefones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62936aaf-9563-45a1-bdcb-84957e54e23b"),
                            ClienteId = new Guid("507f941f-9a2e-4031-bead-4dd89d84a4ba"),
                            Numero = "(82) 98621-8773"
                        },
                        new
                        {
                            Id = new Guid("291b77b6-179c-4531-bb3e-c253a8c372e1"),
                            ClienteId = new Guid("101e2a8c-e88a-4127-875b-fbc05f183edf"),
                            Numero = "(91) 98965-5955"
                        },
                        new
                        {
                            Id = new Guid("098db767-6609-4278-ae45-df3a1308de89"),
                            ClienteId = new Guid("662069b0-a554-4589-ac61-c782da525625"),
                            Numero = "(95) 98234-7636"
                        });
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Documento", b =>
                {
                    b.HasOne("ECommerce.Cliente.Domain.Models.Cliente", "Cliente")
                        .WithOne("Documento")
                        .HasForeignKey("ECommerce.Cliente.Domain.Models.Documento", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Email", b =>
                {
                    b.HasOne("ECommerce.Cliente.Domain.Models.Cliente", "Cliente")
                        .WithOne("Email")
                        .HasForeignKey("ECommerce.Cliente.Domain.Models.Email", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Endereco", b =>
                {
                    b.HasOne("ECommerce.Cliente.Domain.Models.Cliente", "Cliente")
                        .WithOne("Endereco")
                        .HasForeignKey("ECommerce.Cliente.Domain.Models.Endereco", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Telefone", b =>
                {
                    b.HasOne("ECommerce.Cliente.Domain.Models.Cliente", "Cliente")
                        .WithOne("Telefone")
                        .HasForeignKey("ECommerce.Cliente.Domain.Models.Telefone", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ECommerce.Cliente.Domain.Models.Cliente", b =>
                {
                    b.Navigation("Documento");

                    b.Navigation("Email");

                    b.Navigation("Endereco");

                    b.Navigation("Telefone");
                });
#pragma warning restore 612, 618
        }
    }
}
